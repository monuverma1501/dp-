// Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.


//recursive approach
//tc=2^n
gives tle


class Solution {
public:
    int lcs(int i,int j,string &s1,string &s2)
    {
        if(i==0||j==0) return 0;
        if(s1[i-1]==s2[j-1]) return 1+lcs(i-1,j-1,s1,s2);
        else return max(lcs(i-1,j,s1,s2),lcs(i,j-1,s1,s2));
    }
    int longestCommonSubsequence(string text1, string text2) {
        return lcs(text1.size(),text2.size(),text1,text2);
    }
};




//dp 2 state 
// tc=o(n*m)
//sc=o(n*m)+o(n+m)

class Solution {
public:
   
    int longestCommonSubsequence(string s1, string s2) {
        int dp[1001][1001]={0};
        for(int i=1;i<=s1.length();i++)
        {
            for(int j=1;j<=s2.length();j++)
            {
                if(s1[i-1]==s2[j-1]) dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[s1.length()][s2.length()];
    }
};




// dp 1 state 
//tc=o(m*n)
//sc=o(n)


class Solution {
public:
   int longestCommonSubsequence(string text1, string text2) {
        vector<int> dp(text2.size() + 1, 0);
        for (int i = 1; i <= text1.size(); ++i) 
        {
            int neighborPrevRow = dp[0];
            for (int j = 1; j <= text2.size(); ++j) 
            {
                int currPrevRow = dp[j];
                if (text1[i - 1] == text2[j - 1]) 
                {
                    dp[j] = 1 + neighborPrevRow;
                } else 
                {
                    dp[j] = max(currPrevRow, dp[j - 1]);
                }
                neighborPrevRow = currPrevRow;
            }
        }
        return dp[text2.size()];
    }
};
