//   https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/
//return  (str.length()-length_of_longest_palindromic_subsequence)



class Solution {
public:
    int minInsertions(string s1) {
        string s2=s1;
        int n=s1.size();
        reverse(s2.begin(),s2.end());
        int dp[1001][1001]={0};
        for(int i=1;i<=s1.length();i++)
        {
            for(int j=1;j<=s2.length();j++)
            {
                if(s1[i-1]==s2[j-1]) 
                    dp[i][j]=1+dp[i-1][j-1];
                else 
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return n-dp[s1.length()][s2.length()];
    }
};
