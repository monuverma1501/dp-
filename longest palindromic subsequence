// given a string s1
// store it into s2 string ans then reverse the s2 string 
// then apply longest common subsequence 


// solution 1


class Solution {
public:
    int lpsub(string s1) {
        string s2=s1;
        int n=s1.size();
        reverse(s2.begin(),s2.end());
        int dp[1001][1001]={0};
        for(int i=1;i<=s1.length();i++)
        {
            for(int j=1;j<=s2.length();j++)
            {
                if(s1[i-1]==s2[j-1]) 
                    dp[i][j]=1+dp[i-1][j-1];
                else 
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[s1.length()][s2.length()];
    }
};




// solution 2 


class Solution {
public:
    int lpsub(string s) {
        string t=s;
        int n=s.size();
        reverse(t.begin(),t.end());
        vector<int> pre( n + 1  , 0 ) , cur ( n + 1  ,  0 );
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==t[j-1])
                    cur[j]=pre[j-1]+1;
                else
                    cur[j]=max(pre[j],cur[j-1]);
            }
            pre = cur;
        }
        return pre[n];
    }
};
